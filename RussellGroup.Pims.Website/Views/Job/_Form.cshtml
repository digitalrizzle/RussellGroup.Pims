@model RussellGroup.Pims.DataAccess.Models.Job

<hr />

@if (ViewData.ModelState.Any(f => string.IsNullOrEmpty(f.Key)))
{
    @Html.ValidationSummary(true, null, new { @class = "alert alert-danger" })
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="form-horizontal">

        <div class="form-group@(ViewData.ModelState.IsValidField("XJobId") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.XJobId, new { @class = "control-label col-sm-2" })
            <div class="col-sm-2">
                @Html.EditorFor(model => model.XJobId, new { htmlAttributes = new { @class = "form-control", placeholder = "XX9999" } })
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.XJobId, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("Description") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.Description, new { @class = "control-label col-sm-2" })
            <div class="col-sm-6">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.Description, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @(ViewData.ModelState.IsValidField("WhenStarted") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.WhenStarted, new { @class = "control-label col-sm-2" })
            <div class="col-sm-3 col-lg-2">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.WhenStarted, "{0:d/MM/yyyy}", new { @class = "form-control" })
                    <span id="WhenStarted-icon" class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.WhenStarted, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @(ViewData.ModelState.IsValidField("WhenEnded") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.WhenEnded, new { @class = "control-label col-sm-2" })
            <div class="col-sm-3 col-lg-2">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.WhenEnded, "{0:d/MM/yyyy}", new { @class = "form-control" })
                    <span id="WhenEnded-icon" class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.WhenEnded, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("ProjectManager") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.ProjectManager, new { @class = "control-label col-sm-2" })
            <div class="col-sm-4">
                <div class="input-group tt-input-group">
                    @Html.EditorFor(model => model.ProjectManager, new { htmlAttributes = new { @class = "form-control", placeholder = "begin typing a name..." } })
                </div>
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.ProjectManager, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("QuantitySurveyor") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.QuantitySurveyor, new { @class = "control-label col-sm-2" })
            <div class="col-sm-4">
                <div class="input-group tt-input-group">
                    @Html.EditorFor(model => model.QuantitySurveyor, new { htmlAttributes = new { @class = "form-control", placeholder = "begin typing a name..." } })
                </div>
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.QuantitySurveyor, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("NotificationEmail") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.NotificationEmail, new { @class = "control-label col-sm-2" })
            <div class="col-sm-4">
                <div class="input-group tt-input-group">
                    @Html.EditorFor(model => model.NotificationEmail, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                <small class="text-muted">Separate multiple email addresses with a comma</small>
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.NotificationEmail, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("Comment") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.Comment, new { @class = "control-label col-sm-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.Comment, null, new { @class = "help-block" })
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                @if (Html.IsAction("Edit"))
                {
                    <input type="submit" value="Save" class="btn btn-primary" />
                }
                else
                {
                    <input type="submit" value="Create" class="btn btn-primary" />
                }
                &nbsp;
                @Html.ActionLink("Cancel", "Index")
            </div>
        </div>
    </div>
}
