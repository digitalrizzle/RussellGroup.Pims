@model RussellGroup.Pims.DataAccess.Models.Job

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "Inventory Hire Charges";
    var hires = Model.InventoryHires.FirstOrDefault();
}

<h4>@ViewBag.Title</h4>
<h2>@Model.XJobId</h2>
<h3>@Model.Description</h3>
<h4>
    Project Manager:
    @{
        if (string.IsNullOrWhiteSpace(Model.ProjectManager))
        {
            <text><i>Not assigned</i></text>
        }
        else
        {
            <text>@Model.ProjectManager</text>
        }
    }
</h4>
<h5>Period: @ViewBag.WhenStarted.ToShortDateString() to @ViewBag.WhenEnded.ToShortDateString()</h5>

@if (!Model.InventoryHires
    .Where(f =>
        (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.Checkins != null && f.Checkins.Max(c => c.WhenEnded) >= ViewBag.WhenStarted) ||
        (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.IsCheckedOut))
    .Any())
{
    <p>There is no inventory hire for this job in the given period.</p>
}
else
{
    decimal grand = 0;
    <table class="table">
        <thead>
            <tr>
                <th>
                    inventory id
                </th>
                <th>
                    @Html.DisplayNameFor(model => hires.Inventory.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => hires.Docket)
                </th>
                <th>
                    return docket
                </th>
                <th>
                    start
                </th>
                <th>
                    end
                </th>
                <th class="text-right">
                    days
                </th>
                <th class="text-right">
                    @Html.DisplayNameFor(model => hires.Rate)
                </th>
                <th class="text-right">
                    @Html.DisplayNameFor(model => hires.Quantity)
                </th>
                <th class="text-right">
                    cost
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var categoryType in Model.InventoryHires
                .Where(f =>
                    (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.Checkins.Max(c => c.WhenEnded) >= ViewBag.WhenStarted) ||
                    (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.IsCheckedOut))
                .Select(f => f.Inventory.Category.Type)
                .Distinct()
                .OrderBy(f => f)
                .ToList())
            {
                int days = 0;
                decimal total = 0, cost = 0;
                <tr>
                    <td colspan="10"><strong>@categoryType</strong></td>
                </tr>
                foreach (var item in Model.InventoryHires
                    .Where(f => f.Inventory.Category.Type == categoryType)
                    .Where(f => (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.Checkins.Max(c => c.WhenEnded) >= ViewBag.WhenStarted) || (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.IsCheckedOut))
                    .OrderBy(f => f.WhenStarted))
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(model => item.Inventory.XInventoryId)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.Inventory.Description)
                            <br />
                            @Html.DisplayFor(model => item.Comment)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.Docket)
                        </td>
                        <td>
                            @*@Html.DisplayFor(model => item.ReturnDocket)*@
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.WhenStarted)
                        </td>
                        <td>
                            @*@Html.DisplayFor(model => item.WhenEnded)*@
                        </td>
                        <td class="text-right">
                            @*@{
                                var whenStarted = ViewBag.WhenStarted > item.WhenStarted
                                    ? ViewBag.WhenStarted
                                    : item.WhenStarted;

                                days = item.WhenEnded.HasValue
                                    ? item.WhenEnded.Value.AddDays(1).Subtract(whenStarted).Days
                                    : ViewBag.WhenEnded.AddDays(1).Subtract(whenStarted).Days;
                            }
                            @days*@
                        </td>
                        <td class="text-right">
                            @Html.DisplayFor(model => item.Rate)
                        </td>
                        <td class="text-right">
                            @Html.DisplayFor(model => item.Quantity)
                        </td>
                        <td class="text-right">
                            @{cost = days * item.Rate.Value * item.Quantity.Value;}
                            @cost
                            @{total += cost;}
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="10" class="text-right"><strong>@Html.Encode(string.Format("${0:0.00}", total))</strong></td>
                    @{grand += total;}
                </tr>
            }
            <tr>
                <td><strong>TOTAL</strong></td>
                <td colspan="9" class="text-right"><strong>@Html.Encode(string.Format("${0:0.00}", grand))</strong></td>
            </tr>
        </tbody>
    </table>
}
