@model RussellGroup.Pims.DataAccess.Models.Job

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "Job Hire";
}

<h2>@ViewBag.Title</h2>
<h3>@Model.Description</h3>

@if (Model.PlantHires.Count == 0)
{
    <p>There is no plant hire for this job.</p>
}
else
{
    <h4>Plant Hire</h4>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.Encode("plant id")
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PlantHires.Single().Plant.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PlantHires.Single().WhenStarted)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PlantHires.Single().WhenEnded)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PlantHires.Single().Docket)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PlantHires.Single().ReturnDocket)
                </th>
                <th class="right">
                    @Html.DisplayNameFor(model => model.PlantHires.Single().Rate)
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model.PlantHires)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Plant.XPlantId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Plant.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WhenStarted)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WhenEnded)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Docket)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ReturnDocket)
                    </td>
                    <td class="right">
                        @Html.DisplayFor(modelItem => item.Rate)
                    </td>
                </tr>
            }
            <tr>
                <td><strong>TOTAL</strong></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="right">
                    <strong>@Html.Encode(string.Format("{0:0.00}", Model.PlantHires.Sum(f => f.Rate)))</strong>
                </td>
            </tr>
        </tbody>
    </table>
}

@if (Model.InventoryHires.Count == 0)
{
    <p>There is no inventory hire for this job.</p>
}
else
{
    <h4>Inventory Hire</h4>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.Encode("inventory id")
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InventoryHires.Single().Inventory.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InventoryHires.Single().WhenStarted)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InventoryHires.Single().WhenEnded)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InventoryHires.Single().Docket)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.InventoryHires.Single().ReturnDocket)
                </th>
                <th class="right">
                    @Html.DisplayNameFor(model => model.InventoryHires.Single().Rate)
                </th>
                <th class="right">
                    @Html.DisplayNameFor(model => model.InventoryHires.Single().Quantity)
                </th>
                <th class="right">
                    Total
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model.InventoryHires)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Inventory.XInventoryId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Inventory.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WhenStarted)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WhenEnded)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Docket)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ReturnDocket)
                    </td>
                    <td class="right">
                        @Html.DisplayFor(modelItem => item.Rate)
                    </td>
                    <td class="right">
                        @Html.DisplayFor(modelItem => item.Quantity)
                    </td>
                    <td class="right">
                        @Html.Encode(string.Format("{0:0.00}", item.Rate * item.Quantity))
                    </td>
                </tr>
            }
            <tr>
                <td><strong>TOTAL</strong></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="right">
                    <strong>@Html.Encode(string.Format("{0:0.00}", Model.InventoryHires.Sum(f => f.Rate * f.Quantity)))</strong>
                </td>
            </tr>
        </tbody>
    </table>
}
