@model RussellGroup.Pims.DataAccess.Models.Job

@{
    Layout = "~/Views/Shared/_ReportLayout.cshtml";
    ViewBag.Title = "Inventory in job summary by category";
    var hires = Model.InventoryHires.FirstOrDefault();
}

<h2>@Model.Description</h2>
<h3>@ViewBag.Title</h3>
<h4>Project Manager: @Html.Encode(Model.ProjectManager)</h4>
<h5>Period: @Html.Encode(ViewBag.WhenStarted.ToShortDateString()) - @Html.Encode(ViewBag.WhenEnded.ToShortDateString())</h5>

@if (Model.InventoryHires
    .Where(f => (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.WhenEnded >= ViewBag.WhenStarted) || (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && !f.WhenEnded.HasValue))
    .Count(f => !f.WhenEnded.HasValue) == 0)
{
    <p>There is no inventory hire for this job in the given period.</p>
}
else
{
    int grandQuantity = 0;
    decimal grandCost = 0;
    <table class="table">
        <thead>
            <tr>
                <th>
                    category
                </th>
                <th class="text-right">
                    quantity
                </th>
                <th class="text-right">
                    cost
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var category in Model.InventoryHires
                .Where(f => (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.WhenEnded >= ViewBag.WhenStarted) || (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && !f.WhenEnded.HasValue))
                .Select(f => f.Inventory.Category)
                .Distinct()
                .OrderBy(f => f.Name)
                .ToList())
            {
                int totalQuantity = 0, quantity = 0;
                decimal totalCost = 0, cost = 0;

                foreach (var item in Model.InventoryHires
                    .Where(f => f.Inventory.Category == category)
                    .Where(f => (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && f.WhenEnded >= ViewBag.WhenStarted) || (f.WhenStarted < ViewBag.WhenEnded.AddDays(1) && !f.WhenEnded.HasValue))
                    .OrderBy(f => f.Inventory.XInventoryId))
                {
                    if (item.WhenStarted.HasValue)
                    {
                        quantity += 1;
                        cost = DateTime.Now.Subtract(ViewBag.WhenStarted).Days * item.Rate.Value;
                    }

                    totalQuantity += 1;
                    totalCost += cost;
                }
                <tr>
                    <td>@category.Name</td>
                    <td class="text-right">@Html.Encode(totalQuantity)</td>
                    <td class="text-right">@Html.Encode(string.Format("${0:0.00}", totalCost))</td>
                    @{
                        grandQuantity += totalQuantity;
                        grandCost += totalCost;
                    }
                </tr>
            }
            <tr>
                <td><strong>TOTAL</strong></td>
                <td class="text-right"><strong>@Html.Encode(grandQuantity)</strong></td>
                <td class="text-right"><strong>@Html.Encode(string.Format("${0:0.00}", grandCost))</strong></td>
            </tr>
        </tbody>
    </table>
}
