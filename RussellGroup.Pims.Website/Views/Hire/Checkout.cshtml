@model RussellGroup.Pims.Website.Models.CheckoutTransaction
@{
    ViewBag.ShowAnchors = true;
    ViewBag.Title = Html.MvcSiteMap().SiteMapTitle();
}
@section head {
    @Styles.Render("~/Content/typeahead")
}

<h3>@ViewBag.Title</h3>
@if (Model.Job != null)
{
    <h4>@Model.Job.XJobId</h4>
    <h5>@Model.Job.Description</h5>
}

<hr />

@if (ViewData.ModelState.Any(f => string.IsNullOrEmpty(f.Key)))
{
    @Html.ValidationSummary(true, null, new { @class = "alert alert-danger" })
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Job.Id)
    @Html.HiddenFor(model => model.Job.Description)

    <div class="form-horizontal">
        <div class="form-group@(ViewData.ModelState.IsValidField("Docket") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.Docket, new { @class = "control-label col-sm-2" })
            <div class="col-sm-2">
                @Html.TextBoxFor(model => model.Docket, new { @class = "form-control" })
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.Docket, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group @(ViewData.ModelState.IsValidField("WhenStarted") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.WhenStarted, new { @class = "control-label col-sm-2" })
            <div class="col-sm-3 col-lg-2">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.WhenStarted, "{0:d/MM/yyyy}", new { @class = "form-control" })
                    <span id="WhenStarted-icon" class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.WhenStarted, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("JobId") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.Job, new { @class = "control-label col-sm-2" })
            <div class="col-sm-5">
                @Html.DropDownListFor(model => model.JobId, ViewBag.Jobs as SelectList, new { @class = "form-control" })
            </div>
            <div class="col-sm-offset-2 col-sm-10">
                @Html.ValidationMessageFor(model => model.JobId, null, new { @class = "help-block" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("plant hire", new { @class = "control-label col-sm-2" })
            <div id="plant" class="col-sm-10"></div>
        </div>

        <div class="form-group">
            @Html.Label("inventory hire", new { @class = "control-label col-sm-2" })
            <div id="inventory" class="col-sm-10"></div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <input type="submit" value="Checkout" class="btn btn-primary" />
                &nbsp;
                @Html.ActionLink("Cancel", "Index", "Job")
            </div>
        </div>
    </div>
}

@section scripts {
    @Scripts.Render("~/bundles/typeahead")
    <script>
        var nextPlant = 0, nextInventory = 0;

        $(document).ready(function () {
            @foreach (var plant in Model.Plants) { <text>addPlantFormField("@plant.Description", "@plant.Id", "@plant.XPlantId");</text> }
            @foreach (var inventory in Model.Inventories) { <text>addInventoryFormField("@inventory.Key.Description", "@inventory.Key.Id", "@inventory.Key.XInventoryId", "@inventory.Value");</text> }

            addPlantFormField("", "", "");
            addInventoryFormField("", "", "", "");
        });

        function addPlantFormField(description, id, xid) {
            var next = nextPlant;

            var span = [
                '<span id="plant-field' + next + '-icon" class="input-group-addon">',
                    '<span class="glyphicon glyphicon-minus-sign"></span>',
                '</span>'].join("");

            var div = [
                '<div class="checkout-item">',
                    '<div class="input-group col-sm-5">',
                        '<input type="text" id="plant-field' + ++next + '" name="plant-field' + next + '" class="form-control" autocomplete="off" placeholder="begin typing a plant item..." value="' + description + '" />',
                    '</div>',
                    '<input id="plant-id-field' + next + '" name="plant-id-field' + next + '" type="hidden" value="' + id + '" />',
                '</div>'].join("");

            $("#plant").append($(div));
            $("#plant-field" + (next - 1)).after($(span));

            wire("plant", "#plant-field" + next, "#plant-field" + (next - 1) + "-icon");

            if (id != "") {
                var disabled = $("#plant-field" + next);
                disabled.val('[' + xid + ']  ' + disabled.val());
                disabled.typeahead("destroy");
                disabled.attr("disabled", "disabled");
            }

            nextPlant = next;
        }

        function addInventoryFormField(description, id, xid, quantity) {
            var next = nextInventory;

            var span = [
                '<span id="inventory-field' + next + '-icon" class="input-group-addon">',
                    '<span class="glyphicon glyphicon-minus-sign" style="left: -1px">',
                '</span>'].join("");

            var div = [
                '<div class="checkout-item">',
                    '<input type="text" id="inventory-quantity-field' + ++next + '" name="inventory-quantity-field' + next + '" value="' + quantity + '" class="form-control" placeholder="quantity" style="width: 80px; margin-right: 5px; float: left" />',
                    '<div class="input-group col-sm-5">',
                        '<input type="text" id="inventory-field' + next + '" name="inventory-field' + next + '" class="form-control" autocomplete="off" placeholder="begin typing an inventory item..." value="' + description + '" />',
                    '</div>',
                    '<input id="inventory-id-field' + next + '" name="inventory-id-field' + next + '" type="hidden" value="' + id + '" />',
                '</div>'].join("");

            $("#inventory").append($(div));
            $("#inventory-field" + (next - 1)).after($(span));

            wire("inventory", "#inventory-field" + next, "#inventory-field" + (next - 1) + "-icon");

            if (id != "") {
                var disabled = $("#inventory-field" + next);
                disabled.val('[' + xid + ']  ' + disabled.val());
                disabled.typeahead("destroy");
                disabled.attr("disabled", "disabled");
            }

            nextInventory = next;
        }

        function wire(prefix, input, button) {
            var url = prefix == "plant" ? "@Url.Content("~/Hire/GetPlantSuggestions?q=%QUERY")" : "@Url.Content("~/Hire/GetInventorySuggestions?q=%QUERY")";

            var bloodhound = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: url
            });

            bloodhound.initialize();

            $(input).typeahead(null, {
                name: prefix + "-hire",
                source: bloodhound.ttAdapter(),
                displayKey: "description",
                templates: {
                    suggestion: Handlebars.compile([
                        '<p class="typeahead-description">{{description}}</p>',
                        '<p class="typeahead-id">{{xid}}</p>'
                    ].join(""))
                }
            });

            $(input).on("typeahead:selected", function (object, datum) {
                var selected = $(this);
                selected.val('[' + datum.xid + ']  ' + selected.val());
                selected.typeahead("destroy");
                selected.attr("disabled", "disabled");
                selected.parent().parent().children("[id^=" + prefix + "-id-field]").val(datum.id);

                if (prefix == "plant")
                    addPlantFormField("", "", "");
                else
                    addInventoryFormField("", "", "", "");
            });

            if (button) {
                $(button).on("click", function () {
                    $(this).parent().parent().remove();
                });
            }
        }
    </script>
}
