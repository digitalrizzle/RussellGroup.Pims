@model RussellGroup.Pims.DataAccess.ViewModels.CheckoutTransaction

@{
    ViewBag.Title = "Checkout";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @if (@Model.Job != null)
        {
            <h4>@Model.Job.Description</h4>
        }

        <hr />

        @if (ViewData.ModelState.Any(f => string.IsNullOrEmpty(f.Key)))
        {
            @Html.ValidationSummary(true, null, new { @class = "alert alert-danger" })
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Docket, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Docket)
                @Html.ValidationMessageFor(model => model.Docket)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Job, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.JobId, ViewBag.Jobs as SelectList)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("plant hire", new { @class = "control-label col-md-2" })
            <div id="plant" class="col-md-10"></div>
        </div>

        <div class="form-group">
            @Html.Label("inventory hire", new { @class = "control-label col-md-2" })
            <div id="inventory" class="col-md-10"></div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Checkout" class="btn btn-primary" />
                &nbsp;
                @Html.ActionLink("Cancel", "Index", "Job", null, new { @class = "btn-cancel" })
            </div>
        </div>
    </div>
}

@section scripts {
    <script>
        var nextPlant = 0, nextInventory = 0;

        $(document).ready(function () {
            @foreach (var plant in Model.Plants) { <text>addPlantFormField("@plant.Description", "@plant.Id");</text> }
            @foreach (var inventory in Model.Inventories) { <text>addInventoryFormField("@inventory.Key.Description", "@inventory.Key.Id", "@inventory.Value");</text> }

            addPlantFormField("", "");
            addInventoryFormField("", "", "");
        });

        function addPlantFormField(description, id) {
            var next = nextPlant;

            var span = '<span id="plant-field' + next + '-icon" class="input-group-addon glyphicon glyphicon-minus-sign" style="left: -1px"></span>';
            var div = [
                '<div class="input-group tt-input-group">',
                    '<input type="text" id="plant-field' + ++next + '" name="plant-field' + next + '" class="col-span-6 typeahead" autocomplete="off" placeholder="begin typing a plant item..." value="' + description + '" />',
                    '<input id="plant-id-field' + next + '" name="plant-id-field' + next + '" type="hidden" value="' + id + '" />',
                '</div>'].join("");

            $("#plant").append($(div));
            $("#plant-field" + (next - 1)).parent().after($(span));
            wire("plant", "#plant-field" + next, "#plant-field" + (next - 1) + "-icon");

            if (id != "") {
                $("#plant-field" + next).attr("disabled", "disabled");
            }

            nextPlant = next;
        }

        function addInventoryFormField(description, id, quantity) {
            var next = nextInventory;

            var span = '<span id="inventory-field' + next + '-icon" class="input-group-addon glyphicon glyphicon-minus-sign" style="left: -1px"></span>';
            var div = [
                '<div class="input-group tt-input-group">',
                    '<input type="text" id="inventory-quantity-field' + ++next + '" name="inventory-quantity-field' + next + '" value="' + quantity + '" placeholder="quantity" style="width: 80px; margin-right: 5px" />',
                    '<input type="text" id="inventory-field' + next + '" name="inventory-field' + next + '" class="col-span-6 typeahead" autocomplete="off" placeholder="begin typing an inventory item..." value="' + description + '" />',
                    '<input id="inventory-id-field' + next + '" name="inventory-id-field' + next + '" type="hidden" value="' + id + '" />',
                '</div>'].join("");

            $("#inventory").append($(div));
            $("#inventory-field" + (next - 1)).parent().after($(span));
            wire("inventory", "#inventory-field" + next, "#inventory-field" + (next - 1) + "-icon");

            if (id != "") {
                $("#inventory-field" + next).attr("disabled", "disabled");
            }

            nextInventory = next;
        }

        function wire(prefix, input, button) {
            var url = prefix == "plant" ? "@Url.Content("~/Hire/GetPlantSuggestions?q=%QUERY")" : "@Url.Content("~/Hire/GetInventorySuggestions?q=%QUERY")";

            var bloodhound = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: url
            });

            bloodhound.initialize();

            $(input).typeahead(null, {
                name: prefix + "-hire",
                source: bloodhound.ttAdapter(),
                displayKey: "description",
                templates: {
                    suggestion: Handlebars.compile([
                            '<p class="typeahead-description">{{description}}</p>',
                            '<p class="typeahead-id">{{xid}}</p>'
                    ].join(""))
                }
            });

            $(input).on("typeahead:selected", function (object, datum) {
                $(this).attr("disabled", "disabled");
                $(this).parent().parent().children("[id^=" + prefix + "-id-field]").val(datum.id);

                if (prefix == "plant")
                    addPlantFormField("", "");
                else
                    addInventoryFormField("", "", "");
            });

            if (button) {
                $(button).on("click", function () {
                    $(this).prev().children(".hire-typeahead").typeahead("destroy");
                    $(this).parent().remove();
                });
            }
        }
    </script>
}
