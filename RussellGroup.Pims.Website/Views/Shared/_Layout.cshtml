@{
    //ViewBag.HideBreadcrumb = false;   // indicates if the breadcrumb is to be shown
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=10" />
    <title>PIMS - @ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @RenderSection("head", required: false)
    @Styles.Render("~/Content/override")
    @*@Scripts.Render("~/bundles/modernizr")*@
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <img id="logo" class="pull-left hidden-xs hidden-sm" src="@Url.Content("~/Content/dominion_constructors.png")" alt="Dominion Constructors" />
                <strong class="pull-left">@Html.ActionLink("PIMS", "Index", "Home", null, new { @class = "navbar-brand", title = "Plant and Inventory Management System" })</strong>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    @Html.MvcSiteMap().Menu(false)
                </ul>
                <ul class="nav navbar-nav navbar-right hidden-sm">
                    <li class="navbar-text">Hello, @User.Identity.Name!</li>
                </ul>
            </div>
        </div>
    </div>
    <div id="top"></div>
    <div class="container body-content clearfix">
        <div id="environment" class="pull-right">
            @System.Configuration.ConfigurationManager.AppSettings["Environment"]
        </div>
        @if (ViewBag.HideBreadcrumb == null || !ViewBag.HideBreadcrumb)
        {
            <div class="breadcrumb">
                @Html.MvcSiteMap().SiteMapPath()
            </div>
        }
        @RenderBody()
        <hr />
        <footer>
            <small>@Html.GetCopyright(), Version @Html.GetVersion()</small>
        </footer>
    </div>
    @Scripts.Render("~/bundles/js")
    <script>
        //$('a[href*=#]').on('click', function (event) {
        //    event.preventDefault();
        //    var offset = $(this.hash).offset();
        //    if (offset) $('html, body').animate({ scrollTop: offset.top }, 500);
        //});

        (function () {
            var scrollToTop = {
                state: {
                    isVisible: false,
                    makeVisible: false
                },
                toggle: function () {
                    this.state.makeVisible = $(window).scrollTop() > 0;

                    if (this.state.makeVisible && !this.state.isVisible) {
                        this.$control.stop().animate({ opacity: 1 }, 500);
                        this.state.isVisible = true;
                    } else if (!this.state.makeVisible && this.state.isVisible) {
                        this.$control.stop().animate({ opacity: 0 }, 500);
                        this.state.isVisible = false;
                    }
                },
                initialise: function () {
                    var thisControl = scrollToTop;

                    scrollToTop.$control = $('<div id="top"><img src="@Url.Content("~/Content/go-to-top.png")" title="go to top" /></div>')
                        .css({ position: "fixed", right: "10px", bottom: "5px", opacity: 0, cursor: "pointer" })
                        .click(function () {
                            $('html, body').animate({ scrollTop: 0 }, 500);
                            return false;
                        })
                        .appendTo('body');

                    $(window).bind('scroll resize', function (e) {
                        thisControl.toggle();
                    });
                }
            };

            scrollToTop.initialise();
        })();

        (function () {
            var scrollToBottom = {
                state: {
                    isVisible: false,
                    makeVisible: false
                },
                toggle: function () {
                    this.state.makeVisible = $(window).scrollTop() + $(window).height() < $(document).height();

                    if (this.state.makeVisible && !this.state.isVisible) {
                        this.$control.stop().animate({ opacity: 1 }, 500);
                        this.state.isVisible = true;
                    } else if (!this.state.makeVisible && this.state.isVisible) {
                        this.$control.stop().animate({ opacity: 0 }, 500);
                        this.state.isVisible = false;
                    }
                },
                initialise: function () {
                    var thisControl = scrollToBottom;

                    scrollToBottom.$control = $('<div id="bottom"><img src="@Url.Content("~/Content/go-to-bottom.png")" title="go to bottom" /></div>')
                        .css({ position: "fixed", top: "55px", right: "10px", opacity: 1, cursor: "pointer" })
                        .click(function () {
                            $('html, body').animate({ scrollTop: $(document).height() }, 500);
                            return false;
                        })
                        .appendTo('#top');

                    $(window).bind('load scroll resize', function (e) {
                        thisControl.toggle();
                    });
                }
            };

            scrollToBottom.initialise();
        })();
</script>
    @RenderSection("scripts", required: false)
</body>
</html>
