@model RussellGroup.Pims.DataAccess.Models.InventoryHireCheckin

<hr />

@if (ViewData.ModelState.Any(f => string.IsNullOrEmpty(f.Key)))
{
    @Html.ValidationSummary(true, null, new { @class = "alert alert-danger" })
}

@using (Html.BeginForm(Html.IsAction("Edit") ? "Edit" : "CreateCheckin", "InventoryHire", new { id = Model.JobId, hireId = Model.Id }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.JobId)

    <div class="form-horizontal">

        <div class="form-group">
            @Html.Label("job id", new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.Job.XJobId, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
            </div>
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("InventoryId") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.InventoryId, new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @if (Html.IsAction("Edit"))
                {
                    @Html.DropDownListFor(model => model.InventoryId, ViewBag.Inventories as SelectList, new { @class = "form-control", disabled = "disabled" })
                }
                else
                {
                    @Html.DropDownListFor(model => model.InventoryId, ViewBag.Inventories as SelectList, new { @class = "form-control" })
                }
            </div>
            @Html.ValidationMessageFor(model => model.InventoryId, null, new { @class = "help-block form-control-feedback" })
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("Docket") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.Docket, new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.Docket, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.Docket, null, new { @class = "help-block form-control-feedback" })
        </div>

        <div class="form-group @(ViewData.ModelState.IsValidField("WhenEnded") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.WhenEnded, new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.WhenEnded, "{0:d/MM/yyyy}", new { @class = "form-control" })
                    <span id="WhenEnded-icon" class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.WhenEnded, null, new { @class = "form-control-feedback" })
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("Quantity") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.Quantity, new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.Quantity, null, new { @class = "help-block form-control-feedback" })
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("Comment") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.Comment, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.Comment, null, new { @class = "help-block form-control-feedback" })
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (Html.IsAction("Edit"))
                {
                    <input type="submit" value="Save" class="btn btn-primary" />
                }
                else
                {
                    <input type="submit" value="Create" class="btn btn-primary" />
                }
                &nbsp;
                @Html.ActionLink("Cancel", "Index", new { id = Model.JobId })
            </div>
        </div>
    </div>
}
