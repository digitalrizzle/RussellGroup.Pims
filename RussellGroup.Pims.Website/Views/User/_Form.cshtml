@model RussellGroup.Pims.Website.Models.UserRolesViewModel

<h2>User</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@Html.GetAction()</h4>
        <hr />

        @if (ViewData.ModelState.Any(f => string.IsNullOrEmpty(f.Key)))
        {
            @Html.ValidationSummary(true, null, new { @class = "alert alert-danger" })
        }

        @Html.HiddenFor(model => model.User.Id)

        <div class="form-group@(ViewData.ModelState.IsValidField("User.UserName") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.User.UserName, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.User.UserName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.User.UserName, null, new { @class = "help-block form-control-feedback" })
        </div>

        <div class="form-group@(ViewData.ModelState.IsValidField("User.LockoutEnabled") ? string.Empty : " has-error")">
            @Html.LabelFor(model => model.User.LockoutEnabled, new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.User.LockoutEnabled)
            </div>
            @Html.ValidationMessageFor(model => model.User.LockoutEnabled, null, new { @class = "help-block form-control-feedback" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Roles, new { @class = "control-label col-md-2" })
            <div class="col-md-10" style="margin-top:-3px">
                <table id="roles-table">
                    <thead>
                        <tr>
                            <th></th>
                            <th><input type="checkbox" class="check-all" /></th>
                            <th>role</th>
                            <th>description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int index = 0; index < Model.Roles.Count; index++)
                        {
                            <tr>
                                <td>@Html.HiddenFor(model => model.Roles[index].Id)</td>
                                <td>@Html.EditorFor(model => model.Roles[index].IsChecked)</td>
                                <td>@Html.HiddenFor(model => model.Roles[index].Name)@Html.DisplayFor(model => model.Roles[index].Name)</td>
                                <td>@Html.HiddenFor(model => model.Roles[index].Description)@Html.DisplayFor(model => model.Roles[index].Description)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (Html.IsAction("Edit"))
                {
                    <input type="submit" value="Save" class="btn btn-primary" />
                }
                else
                {
                    <input type="submit" value="Create" class="btn btn-primary" />
                }
                &nbsp;
                @Html.ActionLink("Cancel", "Index", null, new { @class = "btn-cancel" })
            </div>
        </div>
    </div>
}